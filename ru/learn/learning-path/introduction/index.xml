<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Введение в InnerSource on InnerSource Commons</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/</link><description>Recent content in Введение в InnerSource on InnerSource Commons</description><generator>Hugo</generator><language>ru</language><atom:link href="https://innersourcecommons.org/ru/learn/learning-path/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Введение</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/01/</guid><description>&lt;div class="paragraph">
&lt;p>Курс «Learning Path» даёт вводную информацию по теме InnerSource.
InnerSource — это применение практик и принципов open source к созданию программного обеспечения внутри организации.
При этом подходе код остаётся собственностью организации и не находится в публичном доступе, однако внутри компании использовать или дорабатывать его может каждый сотрудник.
Этот подход позволяет командам эффективно сотрудничать и быстро адаптировать код при изменении требований.&lt;/p></description></item><item><title>Какие проблемы решает InnerSource</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/02/</guid><description>&lt;div class="paragraph">
&lt;p>InnerSource поощряет и вознаграждает сотрудничество и переиспользование кода кем угодно, независимо от организационной структуры компании.
Это отличается от традиционных подходов, продукты и идеи в которых не выходят за пределы внутренней команды, а знания не распространяются по компании.
Для примера рассмотрим ситуацию.&lt;/p></description></item><item><title> Как работает InnerSource</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/03/</guid><description>&lt;div class="paragraph">
&lt;p>Представим, что «Команда А» использует программу, написанную «Командой Б».
«Команда А» отправляет запрос на новый функционал «Команде Б», однако «Команда Б» не способна вовремя сделать необходимое для первой команды.
При работе в InnerSource, если «Команда А» не может получить функционал просто отправив запрос, то она может сама написать код за вторую команду и отправить решение на код-ревью.
Другими словами, «Команда А» сама реализует необходимый функционал в репозитории «Команды Б» и отправляет Pull Request с изменениями в коде.
«Команда Б» просматривает изменения и в случае, если с ними всё хорошо, принимает отправленный код.&lt;/p></description></item><item><title>Приемущества InnerSource</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/04/</guid><description>&lt;div class="paragraph">
&lt;p>При работе по InnerSource есть много преимуществ.
InnerSource даёт компании масштабируемый способ &lt;strong>гостевым командам получить желаемый функционал в нужный момент&lt;/strong> без необходимости долгосрочной поддержки этого функционала.
Организация в целом остаётся в выигрыше, так как гостевые команды инвестируют время в код, который могут использовать другие команды.&lt;/p></description></item><item><title>Принципы InnerSource</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/05/</guid><description>&lt;div class="paragraph">
&lt;p>Все компании, команды, проекты и люди отличаются между собой.
Поэтому конкретные способы реализации концепции InnerSource в каждом случае свои.
Однако в основе любой реализации всегда лежат четыре главных принципов InnerSource.
Эти принципы пришли из успешных продуктов с открытым исходным кодом — open source — и необходимы для получения выше изложенных приемуществ.&lt;/p></description></item><item><title>Выводы</title><link>https://innersourcecommons.org/ru/learn/learning-path/introduction/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ru/learn/learning-path/introduction/06/</guid><description>&lt;div class="paragraph">
&lt;p>В этом обучении мы получили вводную информацию по InnerSource.
InnerSource применяет лучшие практики и принципы из мира open source к внутренней разработке.
Подход даёт возможность командам получить необходимый функционал в соседних командах, неспособных выполнить запрос на доработку.
Успешный InnerSource включает в себя работу &lt;a href="https://innersourcecommons.org/learn/learning-path/product-owner">&lt;em>Владельца продукта&lt;/em>&lt;/a> и &lt;a href="https://innersourcecommons.org/learn/learning-path/trusted-committer">&lt;em>Trusted Committer&lt;/em>&lt;/a> из &lt;strong>хост-команды&lt;/strong> и &lt;a href="https://innersourcecommons.org/learn/learning-path/contributor">&lt;em>Контрибьютера&lt;/em>&lt;/a> из &lt;strong>гостевой команды&lt;/strong>.&lt;/p></description></item></channel></rss>